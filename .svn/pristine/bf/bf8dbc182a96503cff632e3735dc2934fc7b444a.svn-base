<?php

class AppCodeController extends Controller {

    /**
     * @var string the default layout for the views. Defaults to '//layouts/column2', meaning
     * using two-column layout. See 'protected/views/layouts/column2.php'.
     */
    public $layout = '//layouts/column2';

    /**
     * @return array action filters
     */
    public function filters() {
        return array(
            'accessControl', // perform access control for CRUD operations
            'postOnly + delete', // we only allow deletion via POST request
        );
    }

    /**
     * Specifies the access control rules.
     * This method is used by the 'accessControl' filter.
     * @return array access control rules
     */
    public function accessRules() {
        return array(
            array('allow', // allow all users to perform 'index' and 'view' actions
                'actions' => array('index', 'view'),
                'users' => array('*'),
            ),
            array('allow', // allow authenticated user to perform 'create' and 'update' actions
                'actions' => array('create', 'update', 'competeKeyword'),
                'users' => array('@'),
            ),
            array('allow', // allow admin user to perform 'admin' and 'delete' actions
                'actions' => array('admin', 'delete', 'competeKeyword'),
                'users' => array('admin'),
            ),
            array('deny', // deny all users
                'users' => array('*'),
            ),
        );
    }

    /**
     * Displays a particular model.
     * @param integer $id the ID of the model to be displayed
     */
    public function actionView($id) {
        $appCode = $this->loadModel($id);
        $keywordCode = $this->newKeyword($appCode);
        $this->render('view', array(
            'model' => $appCode,
            'keywordCode' => $keywordCode
        ));
    }

    /**
     * Creates a new model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     */
    public function actionCreate() {
        $model = new AppCode;

        // Uncomment the following line if AJAX validation is needed
        // $this->performAjaxValidation($model);


        if (isset($_POST['AppCode'])) {
            $model->attributes = $_POST['AppCode'];
            if ($model->save())
                $this->redirect(array('view', 'id' => $model->app_id));
        }


        $this->render('create', array(
            'model' => $model,
        ));
    }

    /**
     * Updates a particular model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id the ID of the model to be updated
     */
    public function actionUpdate($id) {
        $model = $this->loadModel($id);

        // Uncomment the following line if AJAX validation is needed
        // $this->performAjaxValidation($model);

        if (isset($_POST['AppCode'])) {
            $model->attributes = $_POST['AppCode'];
            if ($model->save())
                $this->redirect(array('view', 'id' => $model->app_id));
        }

        $this->render('update', array(
            'model' => $model,
        ));
    }

    /**
     * Deletes a particular model.
     * If deletion is successful, the browser will be redirected to the 'admin' page.
     * @param integer $id the ID of the model to be deleted
     */
    public function actionDelete($id) {
        $this->loadModel($id)->delete();

        // if AJAX request (triggered by deletion via admin grid view), we should not redirect the browser
        if (!isset($_GET['ajax']))
            $this->redirect(isset($_POST['returnUrl']) ? $_POST['returnUrl'] : array('admin'));
    }

    /**
     * Lists all models.
     */
    public function actionIndex() {
//        $dataProvider = new CActiveDataProvider('AppCode');
////        var_dump($dataProvider);
//        $this->render('index', array(
//            'dataProvider' => $dataProvider,
//        ));
        $today = date('Y-m-d', time());
        $appCodes = AppCode::model()->with(
                        array(
                            'apps' => array(
                                'select' => 'rating, rating_count, insert_date',
                                'limit' => 1,
                                'order_by' => 'apps.insert_date',
//                                'condition' => "DATE(apps.insert_date) = DATE('.$today.')"
                            ),
                            'countryCode' => array(
                                'select' => 'country_name'
                            ),
                            'categoryCode' => array(
                                'select' => 'category_name'
                            )
                        )
                )->findAll(
                array(
                    'condition' => 'display_flag = :displayFlag',
                    'params' => array(
                        ':displayFlag' => 1
                )));

        $countries = CountryCode::model()->findAll();
        $this->render('index', array(
            'appCodes' => $appCodes,
            'countries' => $countries
        ));
    }

    /**
     * Manages all models.
     */
    public function actionAdmin() {
        $model = new AppCode('search');
        $model->unsetAttributes();  // clear any default values
        if (isset($_GET['AppCode']))
            $model->attributes = $_GET['AppCode'];

        $this->render('admin', array(
            'model' => $model,
        ));
    }

    public function actionCompeteKeyword($id) {
        $model = $this->loadModel($id);
        $this->render('competekeyword', array(
            'model' => $model
        ));
    }

    /**
     * Returns the data model based on the primary key given in the GET variable.
     * If the data model is not found, an HTTP exception will be raised.
     * @param integer the ID of the model to be loaded
     */
    public function loadModel($id) {
        $model = AppCode::model()->findByPk($id);
        if ($model === null)
            throw new CHttpException(404, 'The requested page does not exist.');
        return $model;
    }

    /**
     * Performs the AJAX validation.
     * @param CModel the model to be validated
     */
    protected function performAjaxValidation($model) {
        if (isset($_POST['ajax']) && $_POST['ajax'] === 'app-code-form') {
            echo CActiveForm::validate($model);
            Yii::app()->end();
        }
    }

    protected function newKeyword($appCode) {
        /* @var $appCode AppCode */
        $keywordCode = new KeywordCode;
        if (isset($_POST['KeywordCode'])) {
            $keywordCode->attributes = $_POST['KeywordCode'];
            if ($appCode->addKeywordCode($keywordCode) && $appCode->addRelation($keywordCode)) {
                Yii::app()->user->setFlash('keywordCodeSubmitted', 'keyword has been added');
            }
            $this->refresh();
        }

        return $keywordCode;
    }

}
